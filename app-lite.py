import streamlit as st
import pandas as pd
import json

st.set_page_config(page_title="GoKens Bank AI", page_icon="üè¶", layout="wide")

st.title("üè¶ GoKens Bank AI - –î–µ–º–æ –≤–µ—Ä—Å–∏—è")
st.subheader("–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

# –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
demo_results = [
    {"client_code": 1, "product": "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π", 
     "push_notification": "–ê–π–≥–µ—Ä–∏–º, –≤ —è–Ω–≤–∞—Ä–µ —É –≤–∞—Å 12 –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ —Ç–∞–∫—Å–∏ –Ω–∞ 27 400 ‚Ç∏. –° –∫–∞—Ä—Ç–æ–π –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤–µ—Ä–Ω—É–ª–∏ –±—ã ‚âà1 100 ‚Ç∏. –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É."},
    {"client_code": 2, "product": "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞",
     "push_notification": "–î–∞–Ω–∏—è—Ä, —É –≤–∞—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ –∫—Ä—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∏ —Ç—Ä–∞—Ç—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö. –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—Å—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫–µ—à–±—ç–∫. –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å."},
    {"client_code": 3, "product": "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞",
     "push_notification": "–°–∞–±–∏–Ω–∞, –≤–∞—à–∏ —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –æ–Ω–ª–∞–π–Ω, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—ë—Ç –¥–æ 10% –≤ –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö. –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É."}
]

# –ó–∞–≥—Ä—É–∑–∫–∞ CSV –∏–ª–∏ –¥–µ–º–æ
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ ML
            results = []
            for _, client in df.iterrows():
                # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
                if client['avg_monthly_balance_KZT'] > 1000000:
                    product = "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"
                elif client['age'] < 25:
                    product = "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
                else:
                    product = "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notification = f"{client['name']}, —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å {product}. –û—Ñ–æ—Ä–º–∏—Ç—å?"
                
                results.append({
                    "client_code": client['client_code'],
                    "product": product,
                    "push_notification": notification
                })
            
            # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_df = pd.DataFrame(results)
            st.dataframe(results_df)
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            csv = results_df.to_csv(index=False)
            st.download_button("üíæ –°–∫–∞—á–∞—Ç—å CSV", csv, "recommendations.csv", "text/csv")
else:
    # –î–µ–º–æ-—Ä–µ–∂–∏–º
    st.info("üìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    demo_df = pd.DataFrame(demo_results)
    st.dataframe(demo_df)
    
    # –ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    st.markdown("### üì± –ü—Ä–∏–º–µ—Ä –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    st.info(demo_results[0]['push_notification'])